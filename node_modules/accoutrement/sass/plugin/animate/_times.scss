/// # Timing Maps: Durations & Delays
/// Manage all your duration & delay patterns
/// in a single place -
/// with explicitly documented relationships.
/// @group animate-times


// Timing Map
// ----------
/// A variable storing the map of
/// all timing globally-avialble on your project.
/// Any times added to the `$times` map will be accesible
/// to the `time()` function by default.
///
/// Define each time with a `name`, `base-value`,
/// and optional `adjustments`…
///
/// ```
/// $times: (
///   'fast': <base-value>,
///   'slow': <base-value> ('<function-name>': '<arguments>'),
///   // will return: function-name($base-value, $arguments...)
/// );
/// ```
///
/// - Name your times anything – from abstractions like `fast`,
///   to concrete patterns like `button-background-hover`.
/// - Base-values can be CSS-ready times,
///   or references other times in the map.
/// - Adjustments are a nested map of functions and arguments,
///   for adjusting times directly in your palette.
///
/// @group animate-times
$times: () !default;


// Time [function]
// ---------------
/// Access a named time in your `$times` map.
///
/// @since 1.0.0 -
/// - NEW: Accepts `$do` map argument,
///   for on-the-fly adjustments
/// - NEW: Accepts `$source` map argument,
///   for custom source-palette
///
/// @group animate-times
///
/// @param {string} $time -
///   The name of a time in your configuration
/// @param {map | null} $do [null] -
///   A map of function/ratio adjustments to run on the returned value
/// @param {map} $source [$times] -
///   Optional accoutrement-format map of times to use as the origin palette
/// @return {length} -
///   The calculated length of time
@function time(
  $time,
  $do: null,
  $source: $times
) {
  $time: get-token($source, $time, $do);
  @return if((type-of($time) == 'string'), unquote($time), $time);
}
@include _a_register-function('time');


// Add Times
// ---------
/// Merge individual time maps into the global `$times` variable,
/// in case you want to define times in smaller groups
/// such as `duration-times`, `delay-times`, etc
/// before merging them into a single global times-palette.
///
/// @group animate-times
///
/// @param {map...} $maps -
///   Pass any number of maps to be merged.
/// @output -
///   An updated global `$times` variable,
///   with new maps merged in.
@mixin add-times(
  $maps...
) {
  $times: _a_map-multimerge($times, $maps...) !global;
}
