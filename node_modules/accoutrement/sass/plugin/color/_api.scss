/// # Accessing Colors
/// @group color-api


// Color
// -----
/// The primary function for
/// accessing colors in your palette,
/// or making adjustments on the fly.
///
/// This is more than a wrapper for `map-get($colors, $x)`.
/// It also handles internal color-references, recursion,
/// and functional color-adjustments.
/// It has access to the global `$colors` map by default,
/// but you can also pass in arbitrary color-palette maps as well.
///
/// @since 2.0.0 -
/// - BREAKING: Provides access to color-contrast defaults,
///   if they haven't been re-set by the user
/// @since 1.0.0 -
/// - BREAKING: Renamed `$palette` arg to `$source`
/// - BREAKING: Accepts `$do` argument
///   between `$color` and `$source`
///
/// @group color-api
/// @example scss
///   $colors: (
///     'background': #eee,
///     'text': #222,
///   );
///
///   html {
///     background: color('background');
///     color: color('text');
///   }
///
/// @param {string | list} $color -
///   The name of a color in your palette,
///   or a color description in the
///   [map configuration format](config.html).
/// @param {map | null} $do [null] -
///   A map of function/ratio adjustments to run on the returned value
/// @param {map} $source [$colors] -
///   Optional map containing the source color-palette.
///   Defaults to the global `$colors` map.
///
/// @return {color} -
///   A calculated css-ready color,
///   based on your global color palette and adjustments.
@function color(
  $color,
  $do: null,
  $source: $colors
) {
  $source: map-merge($_a_COLORS, $source);
  @return get-token($source, $color, $do);
}
