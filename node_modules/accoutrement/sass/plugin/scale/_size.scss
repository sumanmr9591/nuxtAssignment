/// # Accessing Sizes
/// @group scale-sizes


// Size [function]
// ---------------
/// Access a named size in your `$sizes` map,
/// using any comparable units.
///
/// @since 1.0.0 -
/// - BREAKING: The previous `$units…` vararg
///   has been replaced with `$do` map argument,
///   for flexible on-the-fly adjustments.
///   Non-map `$do` values are converted to
///   `('convert-units': $do)` before processing,
///   to provide a shortcut for unit-conversions.
///   `size('root', 'cm')` will continue to work,
///   but `size('root', 'em', 10px)` should be changed to
///   `size('root', 'em' 10px)` (with all unit args in a single list)
/// - NEW: Accepts `$source` map argument,
///   for custom source-palette
///
/// @group scale-sizes
///
/// @param {string} $size -
///   The name of any size in your configuration
/// @param {map | unit-args | null} $do [null] -
///   A map of function/ratio adjustments to run on the returned value,
///   or a unit followed by any necessary arguments
///   for conversion
/// @param {map} $source [$sizes] -
///   Optional accoutrement-format map of sizes to use as the origin palette
/// @return {length} -
///   The calculated length, in the requested units.
@function size(
  $size,
  $do: null,
  $source: $sizes
) {
  @if ($do) and (type-of($do) != 'map') {
    $do: ('to': $do);
  }

  $size: get-token($source, $size, $do);
  @return if((type-of($size) == 'string'), unquote($size), $size);
}


// Negative [function]
// -------------------
/// Return the inverse value of any length,
/// in comparable units.
///
/// @since 1.0.0 -
/// - BREAKING: The previous `$units…` vararg
///   has been replaced with `$do` map argument,
///   for flexible on-the-fly adjustments.
///   Non-map `$do` values are converted to
///   `('convert-units': $do)` before processing,
///   to provide a shortcut for unit-conversions.
///   `size('root', 'cm')` will continue to work,
///   but `size('root', 'em', 10px)` should be changed to
///   `size('root', 'em' 10px)` (with all unit args in a single list)
/// - NEW: Accepts `$source` map argument,
///   for custom source-palette
///
/// @group scale-sizes
///
/// @param {string | length | list} $size -
///   The name of a size in your configuration (e.g. `line-height`),
///   or a length to be converted into different units (e.g. `24px`),
///   or a base-size and adjustments to be made
///   (e.g. `24px ('_minor-third': 2)`).
///   For the sake of consistent documentation,
///   I recommend keeping adjustments in the configuration
///   whenever possible.
/// @param {map | unit-args | null} $do [null] -
///   A map of function/ratio adjustments to run on the returned value,
///   or a unit followed by any necessary arguments
///   for conversion
/// @param {map} $source [$sizes] -
///   Optional accoutrement-format map of sizes to use as the origin palette
/// @return {length} -
///   The calculated negative length, in the requested units.
@function negative(
  $size,
  $do: null,
  $source: $sizes
) {
  $size: size($size, $do, $source);

  @if (type-of($size) == 'string') {
    @if (str-index($size, 'calc(') == 1) {
      $size: str-slice($size, 6, -2);
    }

    @return 'calc(-1 * (#{$size}))';
  }

  @return -1 * $size;
}


// Square [mixin]
// --------------
/// Create a square by setting equal CSS `height` and `width` properties
/// with the given size & unit value.
///
/// @since 1.0.0 -
/// - BREAKING: The previous `$units…` vararg
///   has been replaced with `$do` map argument,
///   for flexible on-the-fly adjustments.
///   Non-map `$do` values are converted to
///   `('convert-units': $do)` before processing,
///   to provide a shortcut for unit-conversions.
///   `size('root', 'cm')` will continue to work,
///   but `size('root', 'em', 10px)` should be changed to
///   `size('root', 'em' 10px)` (with all unit args in a single list)
/// - NEW: Accepts `$source` map argument,
///   for custom source-palette
///
/// @group scale-sizes
///
/// @param {string | length | list} $size -
///   The name of a size in your configuration (e.g. `line-height`),
///   or a length to be converted into different units (e.g. `24px`),
///   or a base-size and adjustments to be made
///   (e.g. `24px ('_minor-third': 2)`).
///   For the sake of consistent documentation,
///   I recommend keeping adjustments in the configuration
///   whenever possible.
/// @param {map | unit-args | null} $do [null] -
///   A map of function/ratio adjustments to run on the returned value,
///   or a unit followed by any necessary arguments
///   for conversion
/// @param {map} $source [$sizes] -
///   Optional accoutrement-format map of sizes to use as the origin palette
/// @output -
///   Equal CSS height and width properties,
///   set to the given size and units.
@mixin square(
  $size,
  $do: null,
  $source: $sizes
) {
  $size: size($size, $do, $source);

  height: $size;
  width: $size;
}
