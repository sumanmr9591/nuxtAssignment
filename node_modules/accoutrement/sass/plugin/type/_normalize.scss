// Normalize Font
// --------------
/// Convert font maps into a consistent format -
/// to allow shorthand APIs,
/// while providing reliable data formats to the internal functions.
///
/// @since 2.0.0 -
/// - BREAKING: Non-map fonts are interpreted as font-stacks,
///   and converted to an explicit map
/// - BREAKING: Missing names & stacks are ignored, previously set to `null`
///
/// @access private
/// @group type-normalize
///
/// @param {map | list} $font -
///   A map of font-data using any of the acceptable
///   [font-map](type-fonts.html#variable--fonts) syntax options,
///   or a simple string/list font-stack
/// @param {string} $key [null] -
///   The map key used to access the font,
///   if available…
/// @param {map} $source [$fonts] -
///   Optional accoutrement-format map of fonts
///   to use as the origin palette
/// @return {map} -
///   A map of font data in consistent longhand format
@function _a_normalize-font(
  $font,
  $key: null,
  $source: $fonts
) {
  // make it a map…
  @if (type-of($font) != 'map') {
    $font: ('stack': $font);
  }

  // Normalize name…
  $name: _a_normalize-font-name($font, $key, $source);
  $font: if($name, map-merge($font, ('name': $name)), $font);

  // Normalize the font stack…
  $stack: _a_normalize-font-stack($font);
  $font: if($stack, map-merge($font, ('stack': $stack)), $font);

  // Normalize variants
  $variants: _a_font-get-variants($font);
  @if (length($variants) > 0) {
    $formats: map-get($font, 'formats') or ();

    @each $name, $data in $variants {
      $font: map-remove($font, $name);
      $name: _a_normalize-variant-name($name);
      $data: _a_normalize-variant-data($data, $formats);
      $variant: ($name: $data);
      $font: map-merge($font, $variant);
    }
  }

  @return $font;
}


// Normalize Font Name
// -------------------
/// Normalize a font-name based on
/// implicit or explicit cues.
///
/// @since 2.0.0 -
/// - BREAKING: Ignores private tokens when tracking an alias origin,
///   or determining name based on key
/// - BREAKING: Quotes or unquotes names, based on CSS output requirements
///
/// @access private
/// @group type-normalize
///
/// @param $font -
///   The font map
/// @param {string} $key [null] -
///   The map key used to access the font,
///   if available…
/// @param {map} $source [$fonts] -
///   Optional accoutrement-format map of fonts
///   to use as the origin palette
/// @return {string} -
///   The font-name associated with the given font map
@function _a_normalize-font-name(
  $font,
  $key: null,
  $source: $fonts
) {
  $name: map-get($font, 'name') or null;

  // Try reverse lookup
  @if (not $name) {
    $index: index(map-values($source), $font);
    @if ($index) {
      $name: nth(map-keys($source), $index);
    }
  }

  @if ($key and is-private-token($key))
    or ($name and is-private-token($name)) {
    @return null;
  }

  $name: $name or is-alias-for($source, $key, 'origin') or $key;

  @if (type-of($name) == 'string') {
    $name: if(str-index($name, ' '), quote($name), unquote($name));
  }

  @return $name;
}


// Normalize Font Stack
// --------------------
/// Normalize a font-stack based on
/// given name and stack.
///
/// @access private
/// @group type-normalize
///
/// @param $font -
///   The font map
/// @return {string} -
///   The font-stack associated with the given font map
@function _a_normalize-font-stack(
  $font
) {
  $return: null;
  $stack: map-get($font, 'stack');
  $name: map-get($font, 'name');

  @if (type-of($stack) == 'string') and str-index($stack, ',') {
    $stack: _a_split($stack, ',');
  }

  @if ($stack or $name) {
    $return: join((), (), 'comma');
    $stack: $stack or ();
    $name: if($name, join((), $name), ());
    $stack: join($name, $stack);

    @each $item in $stack {
      $item: _a_trim($item);
      $item: if(str-index($item, ' '), quote($item), unquote($item));
      $return: append($return, $item);
    }
  }

  @return $return;
}


// Normalize Variant Name
// ----------------------
/// Parse a list of font variants into a map of `style` and `weight` settings.
///
/// @since 0.1.0 -
/// - NEW: Supports `'bold italic'` weight/style syntax
///   in addition to `('bold', 'italic')`
/// @since type-4.0.0 -
/// - BREAKING: Name changed from `_parse-font-variant` for clarity.
/// - NEW: Supports both string and number values for font-weight.
///
/// @access private
/// @group type-normalize
///
/// @param {List} $variant -
///   A list of font variants, such as `('bold', 'italic')`.
/// @return {$list} -
///   A list of `($weight, $style)`
@function _a_normalize-variant-name(
  $variant
) {
  $style: 'normal';
  $weight: 'normal';

  @if (type-of($variant) == 'string') and str-index($variant, ' ') {
    $variant: _a_split($variant, ' ');
  }

  @each $item in $variant {
    @if index($_a_FONT-STYLES, $item) {
      $style: $item;
    } @else if index($_a_FONT-WEIGHTS, '' + $item) {
      $weight: $item;
    }
  }

  @return ($weight, $style);
}


// Normalize Variant Data
// ----------------------
/// Convert variant values into a consistent format -
/// to allow shorthand APIs,
/// while providing consistent data formats to the internal functions.
/// Strings are converted to maps,
/// and format-paths are interpolated
/// to create a self-contained map of variant data.
///
/// @access private
/// @group type-normalize
///
/// @param {string | map} $data -
///   A string path for interpolation,
///   or a map of explicit format/path pairs for one font-variant.
/// @param {list} $formats [()] -
///   A list of formats to interpolate with generic paths,
///   to create format/path values.
///   If a path is provided without formats,
///   we'll return `format-error` -
///   allowing the function-call origin to provide
///   a more detailed error message.
/// @return {map} -
///   A map of formats and urls for the given font-variant,
///   merging interpolated and explicit format/paths
///   into a single map.
/// @throws Font-path interpolation of `path` requires a list of formats
@function _a_normalize-variant-data(
  $data,
  $formats: ()
) {

  @if (type-of($data) == 'string') {
    $data: (
      'path': $data
    );
  }

  // Interpolate implicit paths
  $path: map-get($data, 'path');
  $svgid: map-get($data, 'svgid');
  $implicit: ();

  @if $path {
    @if (length($formats) > 0) {
      @each $format in $formats {
        $url: _a_font-url($path, $format, $svgid);
        $implicit: map-merge($implicit, ($format: $url));
      }
    } @else {
      @return _a_error(
        'Font-path interpolation of `#{$path}` requires a list of formats',
        'normalize-font'
      );
    }
  }

  // Extract explicit paths
  $explicit: ();

  @each $key, $value in $data {
    @if map-has-key($_a_FONT-FORMATS, $key) {
      $url: _a_font-url($value, $key, $svgid);
      $explicit: map-merge($explicit, ($key: $url));
    }
  }

  // Merge and return…
  @return map-merge($implicit, $explicit);
}
