// Error Handling
// ==============


// Error Output Override
// ---------------------
/// Turn off error output for testing
/// @access private
$_a_error-output-override: false !default;


// Error [function]
// ----------------
/// Optionally return error messages without failing,
/// as a way to test error cases
///
/// @access private
///
/// @param {string} $message -
///   A useful error message, explaining the problem
/// @param {string} $source -
///   The original source of the error for debugging
/// @param {bool} $override [$_a_error-output-override] -
///   Optionally return the error rather than failing
/// @return {string} -
///   Combined error with source and message
/// @throws When `$override == true`
@function _a_error(
  $message,
  $source,
  $override: $_a_error-output-override
) {
  @if $override {
    @return 'ERROR [#{$source}] #{$message}';
  }

  @error '[#{$source}] #{$message}';
}


// Error [mixin]
// -------------
/// Optionally output mixin error messages without failing,
/// as a way to test error cases
///
/// @access private
///
/// @param {string} $message -
///   A useful error message, explaining the problem
/// @param {string} $source -
///   The original source of the error for debugging
/// @param {bool} $override [$_a_error-output-override] -
///   Optionally return the error rather than failing
/// @output -
///   `--accoutrement-error` property with error message
@mixin _a_error(
  $message,
  $source,
  $override: $_a_error-output-override
) {
  --accoutrement-error: '#{_a_error($message, $source, $override)}';
}


// Type Check [function]
// ---------------------
/// Validate the type of any value
///
/// @access private
///
/// @param {*} $value -
///   The value to type-check
/// @param {string | list} $valid -
///   A list of valid types to check against
/// @param {string} $origin ['_a_type-check'] -
///   The origin of this value, for error reporting
/// @param {string} $arg ['$value'] -
///   The origin arg-name, for error reporting
/// @return {*} -
///   The original value, if it passes the type check
/// @throws `$valid` is not a string or list
/// @throws Type-of `$value` is not considered valid
@function _a_type-check(
  $value,
  $valid,
  $origin: '_a_type-check',
  $arg: '$value'
) {
  @if not index('list' 'string', type-of($valid)) {
    @return _a_error(
      '`$valid` argument bust be a type-string or list of types',
      '_a_type-check'
    );
  }

  $type: type-of($value);

  @if index($valid, $type) {
    @return $value;
  }

  $in: if((length($valid) > 1), 'in types:', 'a');
  $start: '`#{$arg}` argument must be #{$in} #{$valid};';

  @return _a_error(
    '#{$start} got (#{$type}) `#{$value}`',
    $origin
  );
}
