/// # Function Registration
/// Because Sass 3.5+ requires first-class functions,
/// we provide tools for capturing functions
/// and making them available to the Accoutrement map parser.
/// This also provides the ability to alias functions as you like.
/// @group core-register


// Functions
// ---------
/// We provide a single map to store & manage functions
/// that you would like to use inside Accoutrement maps.
///
/// ```scss
/// $functions: (
///   'times': get-function('times'),
///   'divide': get-function('divide'),
/// );
/// ```
///
/// Functions can be registered multiple times,
/// under any aliases,
/// using our standard hashtag reference syntax:
///
/// ```scss
/// $functions: (
///   'times': get-function('times'),
///   '*': '#times',
/// );
/// ```
///
/// @since 0.1.0 -
/// - NEW: Supports the [core](core.html) map-refernece syntax,
///   for creating function aliases
///
/// @group core-register
/// @type map
///
/// @prop {function} <alias> -
///   Each alias key in the map
///   should refer to a captured function
$functions: () !default;


// Register Function
// -----------------
/// In addition to managing the `$functions` map directly,
/// you can also register new functions on the fly:
///
/// ```scss
///   // the first value is the function name,
///   // any additional values provide alias names for the same function
///   @include register-function('rgba', 'alpha');
/// ```
///
/// Functions only need to be registered
/// if they will be used inside accoutrement maps.
/// That includes core Sass functions.
///
/// @group core-register
/// @example scss
///   @include register-function('darken', 'shade');
///
///   /*! Registered Functions… */
///   @each $name, $value in $functions {
///     /*! - #{$name}: #{$value} */
///   }
///
/// @param {string | function} $function -
///   The function-name to be registered
///   or a first-class function previously captured
/// @param {strings} $names... -
///   One or more alias names (strings)
///   to use for map-access to the function
/// @output {map} $functions -
///   Functions are captured
///   and added to the `$functions` map
///   under any number of aliases
@mixin register-function(
  $function,
  $names...
) {
  $origin: 'register-function';
  $register: _a_registration($function, $names, $functions, $origin);
  $functions: $register !global;
}


// Internal Functions
// ------------------
/// These functions are defined internally,
/// and can be called by name without first being captured
/// using the Sass `get-function()` approach.
/// User should not make changes to this map.
///
/// @access private
/// @group core-register
/// @type map
$_a_FUNCTIONS: () !default;


// Register Function
// -----------------
/// Register internal accoutrement functions,
/// that can be safely captured using `function-get()`
/// in the latest versions of Sass.
///
/// @access private
/// @group core-register
///
/// @param {string | function} $function -
///   The function-name to be registered
///   or a first-class function previously captured
/// @param {strings} $names... [$function] -
///   One or more alias names (strings)
///   to use for map-access to the function
/// @output {map} $_ACCOUTREMENT_APP -
///   Functions are registered in a map
///   under any number of aliases
@mixin _a_register-function(
  $function,
  $names...
) {
  $origin: '_a_register-function';
  $register: _a_registration($function, $names, $_a_FUNCTIONS, $origin);
  $_a_FUNCTIONS: $register !global;
}


// Registration
// ------------
/// This function provides the shared logic used by
/// `register-function()` (for user registration)
/// and `_a_register-function()` (for internal use).
///
/// @access private
/// @group core-register
///
/// @param {string | function} $function -
///   The function-name to be registered,
///   or a first-class function previously captured
/// @param {string | list | arglist} $names [$function] -
///   One or more alias names (strings)
///   to use for map-access to the function
/// @param {map} $register [true] -
///   Toggle between user registration
///   and internal registration
/// @return {map} -
///   Updated registration map
/// @throws `$function` is not available to register with Accoutrement
@function _a_registration(
  $function,
  $names: (),
  $register: (),
  $origin: '_a_registration'
) {
  @if not function-exists($function) {
    $error: '#{$function}() is not available to register with Accoutrement';
    @return _a_error($error, $origin);
  } @else {
    @if (length($names) == 0) or (str-index($function, '_') != 1) {
      $names: join($function, $names);
    }

    @if function-exists('get-function') and (type-of($function) == 'string') {
      $function: get-function($function);
    }

    @each $name in $names {
      // capture once, then alias…
      @if (index($names, $name) == 1) {
        $name: ($name: $function);
      } @else {
        $name: ($name: '##{nth($names, 1)}');
      }

      $register: map-merge($register, $name);
    }
  }

  @return $register;
}


// Get Function
// ------------
/// Get a first-class function in Sass 3.5+,
/// or the function name string (unchanged)
/// in older Sass versions.
/// This is safe to use internally,
/// as it allows users to pass in
/// either a string, or a previously-captured function.
///
/// @access private
/// @group core-register
///
/// @param {string | function} $function -
///   The name (string) of a registered function,
///   or the first-class function to be called
/// @param {boolean} $error [true] -
///   Optionally error when function isn't found
/// @return {string | function} -
///   Returns a first-class function in Sass 3.5+,
///   or the function name string in older Sass versions
@function _a_get-function(
  $function
) {
  $type: type-of($function);

  @if ($type == 'function') {
    @return $function;
  }

  @if function-exists('get-function') {
    $registered: map-merge($_a_FUNCTIONS, $functions);

    @if map-has-key($registered, $function) {
      @return get-token($registered, $function);
    }

    @return null;
  }

  @return $function;
}
