// Media Query Tests
// =================
@include test-module('Layout: Queries') {


// Break
// -----
@include describe('Break [function]') {
  @include it('Returns an explicit length directly') {
    @include assert-equal(
      break(30em),
      30em
    );
  }

  @include it('Returns a named breakpoint from the proper map') {
    @include assert-equal(
      break('off-canvas'),
      45em
    );
  }

  @include it('Returns a recursively named breakpoint') {
    @include assert-equal(
      break('useful'),
      45em
    );
  }

  @include it('Returns a named size from accoutrement-scale') {
    @include assert-equal(
      break('page'),
      50em
    );
  }

  @include it('Returns a named size from both maps cross-referenced') {
    @include assert-equal(
      break('p-break'),
      50em
    );
  }

  @include it('Allows adjustment functions') {
    @include assert-equal(
      break('adjust'),
      40em
    );
  }

  @include it('Allows on-the-fly adjustments') {
    @include assert-equal(
      break('adjust', ('times': 2)),
      80em
    );
  }

  @include it('Get breakpoint from local source') {
    $local: ('new': 40em);
    @include assert-equal(
      break('new', $source: $local),
      40em
    );
  }

  @include it('Can turn off access to $sizes') {
    $local: ('new': '#adjust');
    @include assert-equal(
      break('new', $source: $local, $scale: false),
      'ERROR [break] `#adjust` is not a valid length or keyword for $break'
    );
  }
}


// Below
// -----
@include describe('Below [mixin]') {
  @include it('Applies max-width query, with ~1px subtracted') {
    @include assert {
      @include output {
        @include below(30em) {
          test: content;
        }
      }

      @include expect {
        @media (max-width: 29.99em) {
          test: content;
        }
      }
    }
  }
}


// Above
// -----
@include describe('Above [mixin]') {
  @include it('Applies min-width query') {
    @include assert {
      @include output {
        @include above(30em) {
          test: content;
        }
      }

      @include expect {
        @media (min-width: 30em) {
          test: content;
        }
      }
    }
  }
}


// Between
// -------
@include describe('Between [mixin]') {
  @include it('Applies min and max-width queries') {
    @include assert {
      @include output {
        @include between(30em, 40em) {
          test: content;
        }
      }

      @include expect {
        @media (min-width: 30em) and (max-width: 39.99em) {
          test: content;
        }
      }
    }
  }
}

} // end module
