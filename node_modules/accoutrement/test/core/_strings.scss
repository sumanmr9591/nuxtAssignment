// String Utilities
// ================
@include test-module('Core String Utils') {


  // String Replace
// --------------
@include describe('String Replace [function]') {

  @include it('Replaces a sub-string with another string') {
    @include assert-equal(
      _a_str-replace('hello terrible world!', 'terrible', 'beautiful'),
      'hello beautiful world!'
    );
  }

  @include it('Replaces a full string, with any type') {
    @include assert-equal(
      _a_str-replace('hello', 'hello', 300ms),
      300ms
    );
  }

  @include it('Replaces a sub-string with nothing (false)') {
    @include assert-equal(
      _a_str-replace('hello world', 'hello ', false),
      'world'
    );
  }

  @include it('Replaces a sub-string with nothing (null)') {
    @include assert-equal(
      _a_str-replace('hello world', 'hello ', null),
      'world'
    );
  }

  @include it('Replaces all instances of a sub-string') {
    @include assert-equal(
      _a_str-replace('hello world', 'o', '000', true),
      'hell000 w000rld');
  }

  @include it('Replaces sub-strings in a list of strings') {
    @include assert-equal(
      _a_str-replace('hello' 'world', 'o', '000', true),
      'hell000' 'w000rld');
  }

  @include it('Forces $old and $new values to string type') {
    @include assert-equal(
      _a_str-replace('hello 0.5s world!', 0.5s, 250ms),
      'hello 250ms world!'
    );
  }

}


// Interpolate
// -----------
@include describe('interpolate [function]') {
  @include it('Replace any number of interpolation strings with values') {
    @include assert-equal(
      _a_interpolate('hello %s%s', 'world', '!'),
      'hello world!'
    );
  }

  @include it('Errors with too many values') {
    @include assert-equal(
      _a_interpolate('hello %s', 'world', '!'),
      'ERROR [_a_interpolate] Too many interpolation values (2) given for `hello %s`'
    );
  }
}


// String Split [function]
// -----------------------
@include describe('String Split [function]') {
  @include it('Splits a string on a given separator') {
    @include assert-equal(
      _a_split('hello@world', '@'),
      'hello' 'world'
    );
  }

  @include it('Splits a string on a complex separator') {
    @include assert-equal(
      _a_split('hello, this, world', ', '),
      'hello' 'this' 'world'
    );
  }

  @include it('Limits the number of splits') {
    @include assert-equal(
      _a_split('he@llo@wor@ld', '@', 2),
      'he' 'llo'
    );

    @include assert-equal(
      _a_split('he@llo@wor@ld', '@', 1),
      join((), 'he')
    );
  }

  @include it('Can fall short of the limit') {
    @include assert-equal(
      _a_split('he@llo@wor@ld', '@', 10),
      'he' 'llo' 'wor' 'ld'
    );
  }

  @include it('Returns empty string as single-item list') {
    @include assert-equal(
      _a_split('', '@'),
      join((), '')
    );
  }

  @include it('Returns null-separator as single-item list') {
    @include assert-equal(
      _a_split('hello world'),
      join((), 'hello world')
    );
  }

  @include it('Returns empty final string on ending-separator') {
    @include assert-equal(
      _a_split('hello world ', ' '),
      'hello' 'world' ''
    );
  }

  @include it('Splits every letter on empty-string separator') {
    @include assert-equal(
      _a_split('hello world', ''),
      'h' 'e' 'l' 'l' 'o' ' ' 'w' 'o' 'r' 'l' 'd'
    );
  }

  @include it('Forces $string to a string') {
    @include assert-equal(
      _a_split(34.5, '.'),
      '34' '5'
    );
  }
}


// Trim [function]
// ---------------
@include describe('Trim [function]') {
  @include it('Strips whitespace from start and end of a string') {
    @include assert-equal(
      _a_trim('  hello world     '),
      'hello world'
    );
  }

  @include it('Errors on invalid $string type') {
    @include assert-equal(
      _a_trim(3.4),
      'ERROR [str-trim] `$string` argument must be a string; got (number) `3.4`'
    );
  }
}

} // end module
