// Sass Utilities
// ==============
@include test-module('Core Error Handling') {


// Error [function]
// ----------------
@include describe('Error [function]') {
  @include it('Allow errors to return without blocking compilation') {
    @include assert-equal(
      _a_error('This is a test error message', '_a_error test'),
      'ERROR [_a_error test] This is a test error message'
    );
  }
}


// Error [mixin]
// -------------
@include describe('Error [mixin]') {
  @include it('Creates error output for mixins') {
    @include assert {
      @include output {
        @include _a_error('nope', 'test');
      }

      @include expect {
        --accoutrement-error: 'ERROR [test] nope';
      }
    }
  }
}


// Type-Check [function]
// ---------------------
@include describe('Type-Check [function]') {
  @include it('Returns a properly-typed value') {
    @include assert-equal(
      _a_type-check('hello world', 'string'),
      'hello world'
    );
  }

  @include it('Returns properly multi-typed values') {
    @include assert-equal(
      _a_type-check('hello world', 'string' 'list'),
      'hello world'
    );

    @include assert-equal(
      _a_type-check('hello' 'world', 'string' 'list'),
      'hello' 'world'
    );
  }

  @include it('Errors on improper type') {
    @include assert-equal(
      _a_type-check('hello world', 'list', 'my-function', '$this'),
      'ERROR [my-function] `$this` argument must be a list; got (string) `hello world`'
    );
  }

  @include it('Errors on improper valid-type') {
    @include assert-equal(
      _a_type-check('hello world', 3, 'my-function', '$this'),
      'ERROR [_a_type-check] `$valid` argument bust be a type-string or list of types'
    );
  }
}

} // end module
