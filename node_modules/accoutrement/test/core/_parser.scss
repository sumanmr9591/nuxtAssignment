// Core Parser Tests
// =================
@include test-module('Core Parser') {


// Get
// ---
@include describe('Get [function]') {
  $haystack: (
    'slow': 3s,
    'delay': 0.5s,
    'key': 'value',
    '*': 'times',
    'two': 2,
  );

  @include it('Replaces the value of any #alias tag') {
    $needle: ('has-delay': 'is #delay', '#key': 3) '#key';
    $expect: ('has-delay': 'is 0.5s', 'value': 3) 'value';
    @include assert-equal(
      _a_get($haystack, $needle),
      $expect
    );
  }

  @include it('Handles todo-maps at the end of a list') {
    @include assert-equal(
      _a_get($haystack, '#slow' ('times': 2)),
      6
    );
  }

  @include it('Handles explicit todo-maps') {
    $needle: (
      '%value': '#slow or whatever',
      'str-replace': 'or' 'with',
    );
    @include assert-equal(
      _a_get($haystack, $needle),
      '3s with whatever'
    );
  }

  @include it('Allows #alias tags in todo map') {
    $needle: (
      '%value': '#slow',
      '#*': '#two',
    );
    @include assert-equal(
      _a_get($haystack, $needle),
      6s
    );
  }

  @include it('Handles common calc use-case') {
    @include assert-equal(
      _a_get($haystack, calc(#slow + #delay)),
      calc(3s + 0.5s)
    );
  }

  @include it('Handles list values in function calls') {
    $map: (
      'main-start': ['nav-end' 'main-start' 'footer-start'],
      'small-start': (
        '%value': '#main-start',
        'remove-nth': 1
      ),
      'small-end': (
        '%value': '#small-start',
        'str-replace': '-start' '-end' true
      )
    );
    @include assert-equal(
      _a_get($map, '#small-end'),
      ['main-end' 'footer-end']
    );
  }

  @include it('handles complex nested adjustments') {
    $int: 'calc(%s + #two)' ('%s': '#two' ('times': '#two'));
    @include assert-equal(
      _a_get($haystack, $int),
      'calc(4 + 2)'
    );
  }

  @include it('handles nested map values') {
    $map: (
      'shared-stack': 'Neue, Helvetica, Arial',
      'body-font': (
        'name': 'Source Sans Pro',
        'stack': '#shared-stack' ('split': ', '),
      ),
    );

    $expect: (
      'name': 'Source Sans Pro',
      'stack': 'Neue' 'Helvetica' 'Arial',
    );

    @include assert-equal(
      _a_get($map, '#body-font'),
      $expect
    );
  }
}


// Parse
// -----
@include describe('Parse [function]') {
  $haystack: (
    'one': 'original value',
    'two': '#one',
    'three': '#two',
    'four': 'and a new value',
  );

  @include it('Replaces a hashtag key with the associated value') {
    @include assert-equal(
      _a_parse($haystack, '#one'),
      'original value'
    );
  }

  @include it('Handles basic hash recursion') {
    @include assert-equal(
      _a_parse($haystack, '#three'),
      'original value'
    );
  }

  @include it('Handles multiple values with basic recursion') {
    @include assert-equal(
      _a_parse($haystack, '#three #four'),
      'original value and a new value'
    );
  }

  @include it('Handles list values') {
    @include assert-equal(
      _a_parse($haystack, '#three' 7 '#four'),
      ('original value' 7 'and a new value')
    );
  }

  @include it('Handles calc use-case') {
    @include assert-equal(
      _a_parse($haystack, '#three' 7 '#four'),
      ('original value' 7 'and a new value')
    );
  }

  @include it('Maintains list style') {
    $list: ['#three #four#three', 7, '#four'];
    $expect: [
      'original value and a new valueoriginal value',
      7,
      'and a new value'
    ];

    @include assert-equal(
      _a_parse($haystack, $list),
      $expect
    );
  }

  @include it('Handles map values') {
    $map: (
      '#one' '#two': '#two' 7 '#four',
      'and': '#one#one',
    );

    $expect: (
      'original value' 'original value': 'original value' 7 'and a new value',
      'and': 'original valueoriginal value',
    );

    @include assert-equal(
      _a_parse($haystack, $map),
      $expect
    );
  }
}


// Replace
// -------
@include describe('Replace [function]') {
  $map: (
    'na': 'nope',
    'name': 'N4M3!',
    'this-name': 'nah',
    'this_name': 'WTF',
    'find': '#name',
    'number': 3,
  );

  @include it('Replaces #name alias (space-delimited)') {
    @include assert-equal(
      _a_replace($map, 'Replace #name alias'),
      'Replace N4M3! alias'
    );
  }

  @include it('Handles recursive hash values') {
    @include assert-equal(
      _a_replace($map, 'Replace #find alias'),
      'Replace N4M3! alias'
    );
  }

  @include it('Replaces multiple hash values') {
    @include assert-equal(
      _a_replace($map, 'what)#this_name#name thing'),
      'what)WTFN4M3! thing'
    );
  }

  @include it('Handles a lonely hashtag') {
    @include assert-equal(
      _a_replace($map, '#number'),
      3
    );
  }

  @include it('Ignores unknown hashtags') {
    @include assert-equal(
      _a_replace($map, 'please #ignore'),
      'please #ignore'
    );
  }

  @include it('Can distinguish between overlapping keys') {
    @include assert-equal(
      _a_replace($map, '#name#na'),
      'N4M3!nope'
    );
  }

  @include it('Finds an alias without explicit ending') {
    @include assert-equal(
      _a_replace($map, '#nameofthething'),
      'N4M3!ofthething'
    );
  }
}


// Do Each [function]
// ------------------
@include describe('Do Each [function]') {
  @include it('Handles each adjustment in a $do map') {
    $map: (
      'root': 16px,
      'large': '#root',
    );
    $do: (
      '_octave': 2,
      'plus': '#root' ('divide': 2),
    );

    @include assert-equal(
      _a_do-each($map, 16px, $do),
      72px
    );
  }
}


// Do [function]
// -------------
@include describe('Do [function]') {
  @include it('Adjusts a number based on ratios') {
    $source: (
      'two': 2,
    );

    @include assert-equal(
      _a_do($source, '_octave', 3, '#two'),
      12
    );
  }

  @include it('Adjusts a value based on functions') {
    $source: (
      's': 'o',
    );

    @include assert-equal(
      _a_do($source, 'str-replace', 'hello world', '#s', '000', true),
      'hell000 w000rld'
    );
  }

  @include it('Ignores a single null arg') {
    @include assert-equal(
      _a_do(('not': 'needed'), 'round', 2.35, null),
      2
    );
  }

  @if function-exists('get-function') {
    @include it('Errors on missing function') {
      @include assert-equal(
        _a_do(('not': 'needed'), 'mine', 2.35, 'any'),
        'ERROR [_a_do] No ratio or function named `mine`'
      );
    }
  }
}


// Flat Source [function]
// ----------------------
@include describe('Flat Source [function]') {
  @include it('Compiles a flat map of all valid source keys') {
    $test: (
      'one': 1,
      'nest': (
        'two': 2,
        'nest': (
          'three': 3
        ),
      ),
    );

    @include assert-equal(
      _a_flat-source($test),
      (
        'one': 1,
        'nest': (
          'two': 2,
          'nest': (
            'three': 3
          ),
        ),
        'nest->two': 2,
        'nest->nest': (
          'three': 3
        ),
        'nest->nest->three': 3,
      )
    );
  }
}


} // end module
