// Core API Tests
// ==============
@include test-module('Core API') {


// Token Get
// ---------
@include describe('Token Get [function]') {
  $haystack: (
    'slow': 3s,
    'delay': 0.5s,
    'key': '#slow',
  );

  @include it('Can start with a simple map key') {
    @include assert-equal(
      get-token($haystack, 'delay'),
      0.5s
    );
  }

  @include it('Handles recursion with accoutrement-get') {
    @include assert-equal(
      get-token($haystack, 'key'),
      3s
    );
  }

  @include it('Handles on-the-fly adjustments with $do') {
    @include assert-equal(
      get-token($haystack, 'key', ('_octave': 2, 'minus': '#delay')),
      11.5s
    );
  }
}


// Deep Token Get
// ---------
@include describe('Deep Token Get [function]') {
  $map: (
    'this': 0,
    'this->that': 1,
    'foo': (
      'baz': 2,
      'three': (
        'abc': '#foo->baz',
        'def': '#this'
      ),
    ),
    'ofo': (
      'zab': 4
    ),
    'fop': '#foo->baz',
    'fta': '#foo->three->abc',
    'ftb': '#foo->three->def',

    // These two tests illustrate the tolerance for `->` in keys/values
    'bar': '#this->that', // 1 [-> used in valid key]
    'bip': 'this->that', // this->that [not a hashtag]

    'dop': '#ofo->nope',
    'dip': '#that->baz',
  );

  @include it('Can start with a simple parent->child lookup') {
    @include assert-equal(
      get-token($map, 'foo->baz'),
      2
    );
  }

  @include it('Handles parent->child hashes in values') {
    @include assert-equal(
      get-token($map, 'fop'),
      2
    );
  }

  @include it('Handles multi-level hashes and references') {
    @include assert-equal(
      (get-token($map, 'fta'), get-token($map, 'ftb')),
      (2,0)
    );
  }

  @include it('Tolerates `->` in keys and values') {
    @include assert-equal(
      (get-token($map, 'bar'), get-token($map, 'bip')),
      (1,'this->that')
    );
  }

  @include it('Fails elegantly when keys are not found') {
    @include assert-equal(
      (get-token($map, 'dop'), get-token($map, 'dip')),
      ('("zab": 4)->nope', '#that->baz')
    );
  }
}

} // end module
