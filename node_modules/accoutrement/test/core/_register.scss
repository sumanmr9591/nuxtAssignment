// Sass Utilities
// ==============
@include test-module('Core Function Registration') {


// Registration
// ------------
@include describe('_a_registration [function]') {
  $rgba: if(function-exists('get-function'), get-function('rgba'), 'rgba');

  @include it('Adds functions to a registration map') {
    @include assert-equal(
      _a_registration('rgba', $register: ('already': 'here')),
      (
        'already': 'here',
        'rgba': $rgba
      )
    );
  }

  @include it('Registers alias names for functions') {
    @include assert-equal(
      _a_registration('rgba', ('alpha', 'a')),
      (
        'rgba': $rgba,
        'alpha': '#rgba',
        'a': '#rgba',
      )
    );
  }

  @include it('Prefers the alias for private functions') {
    $exp: if(
      function-exists('get-function'),
      get-function('_a_registration'),
      '_a_registration'
    );
    @include assert-equal(
      _a_registration('_a_registration', 'register'),
      ('register': $exp)
    );
  }

  @include it('Errors when function is not available') {
    @include assert-equal(
      _a_registration('my-func', 'alias', $origin: 'test'),
      'ERROR [test] my-func() is not available to register with Accoutrement'
    );
  }
}


// Register Function [mixins]
// --------------------------
@include describe('Register Function [mixins]') {
  @include it('Adds to the list of registered functions') {
    // reset the globals, for a clean testing environment
    $old-int: $_a_FUNCTIONS;
    $_a_FUNCTIONS: () !global;
    $old-user: $functions;
    $functions: () !global;

    // register internal and user functions
    @include _a_register-function('rgba', '_c', '_a_');
    @include register-function('rgba', '_c', '_a_');

    // legacy Sass app-functions map
    $expect: (
      'rgba': 'rgba',
      '_c': '#rgba',
      '_a_': '#rgba',
    );

    // first-class Sass app-functions map
    @if (function-exists('get-function')) {
      $expect: (
        'rgba': get-function('rgba'),
        '_c': '#rgba',
        '_a_': '#rgba',
      );
    }

    @include assert-equal(
      $_a_FUNCTIONS,
      $expect
    );

    @include assert-equal(
      $functions,
      $expect
    );

    $_a_FUNCTIONS: $old-int !global;
    $functions: $old-user !global;
  }
}


// Get Function
// ------------
@include describe('Get Function [function]') {
  @include _a_register-function('rgba', 'a');
  $test: _a_get-function('rgba');
  $alias: _a_get-function('a');

  @include it('Returns a function or function-name') {
    $expect: 'rgba';

    @if (function-exists('get-function')) {
      $expect: get-function('rgba');
    }

    @include assert-equal(
      $test,
      $expect
    );
  }

  @include it('Returns a function via alias') {
    $expect: 'rgba';

    @if (function-exists('get-function')) {
      $expect: get-function('rgba');
    }

    @include assert-equal(
      $alias,
      $expect
    );
  }

  @include it('Returned function or name is callable') {
    @include assert-equal(
      call($test, blue, 0.5),
      rgba(blue, 0.5)
    );

    @include assert-equal(
      call($alias, blue, 0.5),
      rgba(blue, 0.5)
    );
  }

  @if function-exists('get-function') {
    @include it('Functions are returned without change') {
      @include assert-equal(
        _a_get-function(get-function('rgba')),
        get-function('rgba')
      );
    }
  }
}

} // end module
